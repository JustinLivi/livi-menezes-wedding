service: livi-menezes-wedding

custom:
  tables:
    profiles: profiles
  serverless-offline:
    port: 3001
    stage: dev
    region: localhost
    cacheInvalidationRegex: node_modules|build
  customDomain:
    domainName: api.livimenezes.com
    stage: prod
    certificateName: 'api.livimenezes.com'
    createRoute53Record: true
    endpointType: 'regional'
  alerts:
    stages:
      - prod
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration
    topics:
      ok: ${self:service}-${opt:stage}-alerts-ok
      insufficientData: ${self:service}-${opt:stage}-alerts-insufficientData
      alarm:
        topic: ${self:service}-${opt:stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${env:ADMIN_EMAIL}
          - protocol: sms
            endpoint: ${env:ADMIN_SMS}
    definitions:
      bunyanErrors:
        metric: bunyanErrors
        threshold: 0
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: '{$.level > 40}'

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-plugin-aws-alerts

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1
  environment:
    DYNAMODB_PROFILE_TABLE: ${self:custom.tables.profiles}
    DYNAMODB_ENDPOINT: https://dynamodb.us-east-1.amazonaws.com
    REGION: 'us-east-1'
    UI_ORIGIN: 'https://livimenezes.com,https://www.livimenezes.com'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_PROFILE_TABLE}'

functions:
  app:
    handler: build/serverless/src/index.handler
    events:
      - http:
          path: /user/{proxy+}
          method: get
          cors: true
      - http:
          path: /rsvp/ceremony
          method: post
          cors: true
      - http:
          path: /rsvp/rehearsal
          method: post
          cors: true
      - http:
          path: /rsvp/details
          method: post
          cors: true
      - http:
          path: /quiz/{proxy+}
          method: post
          cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.profiles}
